[
    {
        "year": "2021",
        "name": "29th ICPC 2021",
        "info": "Madrid, Spain",
        "venues": [
            {
                "sub_name_abbr": "conf/iwpc/2021",
                "sub_name": "29th IEEE/ACM International Conference on Program Comprehension, ICPC 2021, Madrid, Spain, May 20-21, 2021.",
                "count": 49,
                "papers": [
                    "A Multi-Modal Transformer-based Code Summarization Approach for Smart Contracts.",
                    "Assessing Semantic Frames to Support Program Comprehension Activities.",
                    "Atoms of Confusion in Java.",
                    "Automated Comment Update: How Far are We?",
                    "Bug or not bug? That is the question.",
                    "Characterization and Prediction of Questions without Accepted Answers on Stack Overflow.",
                    "Code Authors Hidden in File Revision Histories: An Empirical Study.",
                    "Comprehensive Integration of API Usage Patterns.",
                    "ConfInLog: Leveraging Software Logs to Infer Configuration Constraints.",
                    "Considerations and Pitfalls in Controlled Experiments on Code Comprehension.",
                    "Does Code Structure Affect Comprehension? On Using and Naming Intermediate Variables.",
                    "EtherSolve: Computing an Accurate Control-Flow Graph from Ethereum Bytecode.",
                    "Exploiting Method Names to Improve Code Summarization: A Deliberation Multi-Task Learning Approach.",
                    "Exploiting the Unique Expression for Improved Sentiment Analysis in Software Engineering Text.",
                    "FLeCCS: A Technique for Suggesting Fragment-Level Similar Co-change Candidates.",
                    "From Novice to Expert: Analysis of Token Level Effects in a Longitudinal Eye Tracking Study.",
                    "Improving Code Summarization with Block-wise Abstract Syntax Tree Splitting.",
                    "Keywords Guided Method Name Generation.",
                    "Locating Faulty Methods with a Mixed RNN and Attention Model.",
                    "Multi-Programming-Language Commits in OSS: An Empirical Study on Apache Projects.",
                    "Predicting Community Smells' Occurrence on Individual Developers by Sentiments.",
                    "Predicting Crash Fault Residence via Simplified Deep Forest Based on A Reduced Feature Set.",
                    "Project-Level Encoding for Neural Source Code Summarization of Subroutines.",
                    "RAID: Tool Support for Refactoring-Aware Code Reviews.",
                    "Shallow or Deep? An Empirical Study on Detecting Vulnerabilities using Deep Learning.",
                    "The Effect of a Block-based Language on Formula Comprehension in Spreadsheets.",
                    "The Effect Of Crowding On The Reading Of Program Code For Programmers With Dyslexia.",
                    "Understanding Architecture Erosion: The Practitioners' Perceptive.",
                    "Understanding Code Smell Detection via Code Review: A Study of the OpenStack Community.",
                    "Using Grammar Patterns to Interpret Test Method Name Evolution.",
                    "Using Non-Verbal Expressions as a Tool in Naming Research.",
                    "Weighing the Evidence: On Relationship Types in Microservice Extraction.",
                    "Where to Handle an Exception? Recommending Exception Handling Locations from a Global Perspective.",
                    "Automatic Extraction of Code Dependency in Virtual Reality Software.",
                    "Comprehending Spreadsheets: Which Strategies do Users Apply?",
                    "Detecting Inconsistent Thrown Exceptions.",
                    "Toward Automated Exploit Generation for Known Vulnerabilities in Open-Source Libraries.",
                    "Towards improving architectural diagram consistency using system descriptors.",
                    "Understanding Execution Environment of File-Manipulation Scripts by Extracting Pre-Conditions.",
                    "API2Com: On the Improvement of Automatically Generated Code Comments Using API Documentations.",
                    "Checking App Behavior Against App Descriptions: What If There are No App Descriptions?",
                    "Warning-Introducing Commits vs Bug-Introducing Commits: A tool, statistical models, and a preliminary user study.",
                    "What is the Vocabulary of Flaky Tests? An Extended Replication.",
                    "Is Algorithm Comprehension Different from Program Comprehension?",
                    "Let's Ask Students About Their Programs, Automatically.",
                    "Students' Misunderstanding of the Order of Evaluation in Conjoined Conditions.",
                    "ArCode: A Tool for Supporting Comprehension and Implementation of Architectural Concerns.",
                    "Interactive Static Software Performance Analysis in the IDE.",
                    "RefactorHub: A Commit Annotator for Refactoring."
                ]
            }
        ]
    },
    {
        "year": "2020",
        "name": "28th ICPC 2020",
        "info": "Seoul, Korea",
        "venues": [
            {
                "sub_name_abbr": "conf/iwpc/2020",
                "sub_name": "ICPC '20: 28th International Conference on Program Comprehension, Seoul, Republic of Korea, July 13-15, 2020.",
                "count": 50,
                "papers": [
                    "On the Equivalence of Information Retrieval Methods for Automated Traceability Link Recovery: A Ten-Year Retrospective.",
                    "A Human Study of Comprehension and Code Summarization.",
                    "A Literature Review of Automatic Traceability Links Recovery for Software Change Impact Analysis.",
                    "A Model to Detect Readability Improvements in Incremental Changes.",
                    "A Self-Attentional Neural Architecture for Code Completion with Multi-Task Learning.",
                    "Adaptive Deep Code Search.",
                    "An Empirical Study of Quick Remedy Commits.",
                    "An Empirical Study on Critical Blocking Bugs.",
                    "An Empirical Study on Dynamic Typing Related Practices in Python Systems.",
                    "BugSum: Deep Context Understanding for Bug Report Summarization.",
                    "Deep-Diving into Documentation to Develop Improved Java-to-Swift API Mapping.",
                    "Duplicate Bug Report Detection Using Dual-Channel Convolutional Neural Networks.",
                    "Evaluating a Visual Approach for Understanding JavaScript Source Code.",
                    "GGF: A Graph-based Method for Programming Language Syntax Error Correction.",
                    "How Does Incomplete Composite Refactoring Affect Internal Quality Attributes?",
                    "How Graduate Computing Students Search When Using an Unfamiliar Programming Language.",
                    "How are Deep Learning Models Similar?: An Empirical Study on Clone Analysis of Deep Learning Software.",
                    "Improved Code Summarization via a Graph Neural Network.",
                    "Improving Code Search with Co-Attentive Representation Learning.",
                    "Investigating Near-Miss Micro-Clones in Evolving Software.",
                    "Exploiting Code Knowledge Graph for Bug Localization via Bi-directional Attention.",
                    "Knowledge Transfer in Modern Code Review.",
                    "Measuring Software Testability Modulo Test Quality.",
                    "On Combining IR Methods to Improve Bug Localization.",
                    "Performing Tasks Can Improve Program Comprehension Mental Model of Novice Developers: An Empirical Approach.",
                    "srcClone: Detecting Code Clones via Decompositional Slicing.",
                    "Supporting Program Comprehension through Fast Query response in Large-Scale Systems.",
                    "Testing of Mobile Applications in the Wild: A Large-Scale Empirical Study on Android Apps.",
                    "The Secret Life of Commented-Out Source Code.",
                    "UI Screens Identification and Extraction from Mobile Programming Screencasts.",
                    "Unified Configuration Setting Access in Configuration Management Systems.",
                    "What Drives the Reading Order of Programmers?: An Eye Tracking Study.",
                    "When Are Smells Indicators of Architectural Refactoring Opportunities: A Study of 50 Software Projects.",
                    "Combining Biometric Data with Focused Document Types Classifies a Success of Program Comprehension.",
                    "Detecting Code Comment Inconsistency using Siamese Recurrent Network.",
                    "Improving the Accuracy of Spectrum-based Fault Localization for Automated Program Repair.",
                    "Inheritance software metrics on smart contracts.",
                    "Linguistic Documentation of Software History.",
                    "Program Comprehension in Virtual Reality.",
                    "Staged Tree Matching for Detecting Code Move across Files.",
                    "Automatic Android Deprecated-API Usage Update by Learning from Single Updated Example.",
                    "Ownership at Large: Open Problems and Challenges in Ownership Management.",
                    "Program Slicing and Execution Tracing for Differential Testing at Adobe Analytics.",
                    "Understanding What Software Engineers Are Working on: The Work-Item Prediction Challenge.",
                    "How do Students Experience and Judge Software Comprehension Techniques?",
                    "BugVis: Commit Slicing for Fault Visualisation.",
                    "Just-In-Time Test Smell Detection and Refactoring: The DARTS Project.",
                    "OpenSZZ: A Free, Open-Source, Web-Accessible Implementation of the SZZ Algorithm.",
                    "Refactoring Android-specific Energy Smells: A Plugin for Android Studio.",
                    "SimplyHover: Improving Comprehension of else Statements."
                ]
            }
        ]
    },
    {
        "year": "2019",
        "name": "27th ICPC 2019",
        "info": "Montreal, QC, Canada",
        "venues": [
            {
                "sub_name_abbr": "conf/iwpc/2019",
                "sub_name": "Proceedings of the 27th International Conference on Program Comprehension, ICPC 2019, Montreal, QC, Canada, May 25-31, 2019.",
                "count": 43,
                "papers": [
                    "What goes on in your brain when you read and understand code?",
                    "Improving source code readability: theory and practice.",
                    "Replicating novices' struggles with coding style.",
                    "How does feature dependency affect configurable system comprehensibility?",
                    "Live programming and software evolution: questions during a programming change task.",
                    "Measuring the cognitive load of software developers: a systematic mapping study.",
                    "A large-scale empirical study on code-comment inconsistencies.",
                    "An empirical study on practicality of specification mining algorithms on a real-world application.",
                    "Neural detection of semantic code clones via tree-based convolution.",
                    "Comparing bug replication in regular and micro code clones.",
                    "Comparing heuristic and machine learning approaches for metric-based code smell detection.",
                    "Enabling clone detection for ethereum via smart contract birthmarks.",
                    "Prevalence of bad smells in PL/SQL projects.",
                    "CCEvovis: a clone evolution visualization system for software maintenance.",
                    "CodersMUSE: multi-modal data exploration of program-comprehension experiments.",
                    "DeepVisual: a visual programming tool for deep learning systems.",
                    "PADLA: a dynamic log level adapter using online phase detection.",
                    "Visualizing sequences of debugging sessions using swarm debugging.",
                    "srcPtr: a framework for implementing static pointer analysis approaches.",
                    "Removal of design problems through refactorings: are we looking at the right symptoms?",
                    "Indentation: simply a matter of style or support for program comprehension?",
                    "Does BLEU score work for code migration?",
                    "To CamelCase or under_score.",
                    "The untapped potential of analyzing complete developer workflows.",
                    "Replication can improve prior results: a GitHub study of pull request acceptance.",
                    "Do extracted state machine models help to understand embedded software?",
                    "Exploring tools and strategies used during regular expression composition tasks.",
                    "Are static analysis violations really fixed?: a closer look at realistic usage of SonarQube.",
                    "CCSpec: a correctness condition specification tool.",
                    "Comparing the EvoStreets visualization technique in two D and three-dimensional environments: a controlled experiment.",
                    "Learning a classifier for prediction of maintainability based on static analysis tools.",
                    "Sequence coverage directed greybox fuzzing.",
                    "Recommending differentiated code to support smart contract update.",
                    "Understanding evolutionary coupling by fine-grained co-change relationship analysis.",
                    "Understanding large-scale software: a hierarchical view.",
                    "Towards automated testing of blockchain-based decentralized applications.",
                    "Analyzing performance-aware code changes in software development process.",
                    "A replication study on code comprehension and expertise using lightweight biometric sensors.",
                    "Measuring interprocess communications in distributed systems.",
                    "Meditor: inference and application of API migration edits.",
                    "On the use of information retrieval to automate the detection of third-party Java library migration at the method level.",
                    "Recommending comprehensive solutions for programming tasks by mining crowd knowledge.",
                    "Using frugal user feedback with closeness analysis on code to improve IR-based traceability recovery."
                ]
            }
        ]
    },
    {
        "year": "2018",
        "name": "26th ICPC 2018",
        "info": "Gothenburg, Sweden",
        "venues": [
            {
                "sub_name_abbr": "conf/iwpc/2018",
                "sub_name": "Proceedings of the 26th Conference on Program Comprehension, ICPC 2018, Gothenburg, Sweden, May 27-28, 2018.",
                "count": 48,
                "papers": [
                    "Mining the mind, minding the mine: grand challenges in comprehension and mining.",
                    "Sensing and supporting software developers' focus.",
                    "Overcoming language dichotomies: toward effective program comprehension for mobile app development.",
                    "Adventures in NICAD: a ten-year retrospective.",
                    "Meaningful variable names for decompiled code: a machine translation approach.",
                    "Descriptive compound identifier names improve source code comprehension.",
                    "Un-break my build: assisting developers with build repair hints.",
                    "Aiding comprehension of unit test cases and test suites with stereotype-based tagging.",
                    "JIT feedback: what experienced developers like about static analysis.",
                    "How do design decisions affect the distribution of software metrics?",
                    "Hierarchical abstraction of execution traces for program comprehension.",
                    "Component interface identification and behavioral model discovery from software execution data.",
                    "Recognizing software bug-specific named entity in software bug repository.",
                    "Recommending frequently encountered bugs.",
                    "Cross version defect prediction with representative data via sparse subset selection.",
                    "Unsupervised deep bug report summarization.",
                    "Analysis of test log information through interactive visualizations.",
                    "A search-based approach for accurate identification of log message formats.",
                    "Logtracker: learning log revision behaviors proactively from software evolution history.",
                    "Identifying software components from object-oriented APIs based on dynamic analysis.",
                    "Deep code comment generation.",
                    "Automatically classifying posts into question categories on stack overflow.",
                    "Automatic tag recommendation for software development video tutorials.",
                    "Classification of APIs by hierarchical clustering.",
                    "LESdroid: a tool for detecting exported service leaks of Android applications.",
                    "Do developers update third-party libraries in mobile apps?",
                    "What's inside my app?: understanding feature redundancy in mobile apps.",
                    "Impacts of coding practices on readability.",
                    "The effect of poor source code lexicon and readability on developers' cognitive load.",
                    "Assessing an architecture's ability to support feature evolution.",
                    "Code phonology: an exploration into the vocalization of code.",
                    "Towards just-in-time refactoring recommenders.",
                    "Toward refactoring evaluation with code naturalness.",
                    "Replicomment: identifying clones in code comments.",
                    "A preliminary study on using code smells to improve bug localization.",
                    "What design topics do developers discuss?",
                    "Toward introducing automated program repair techniques to industrial software development.",
                    "Learning lexical features of programming languages from imagery using convolutional neural networks.",
                    "On the naturalness of auto-generated code: can we identify auto-generated code automatically?",
                    "Augmenting source code lines with sample variable values.",
                    "An empirical investigation on the readability of manual and generated test cases.",
                    "How slim will my system be?: estimating refactored code size by merging clones.",
                    "Codecompass: an open software comprehension framework for industrial usage.",
                    "Leveraging the agile development process for selecting invoking/excluding tests to support feature location.",
                    "SDexplorer: a generic toolkit for smoothly exploring massive-scale sequence diagram.",
                    "CoBOT: static C/C++ bug detection in the presence of incomplete code.",
                    "MetropolJS: visualizing and debugging large-scale javascript program structure with treemaps.",
                    "The codecompass comprehension framework."
                ]
            }
        ]
    },
    {
        "year": "2017",
        "name": "25th ICPC 2017",
        "info": "Buenos Aires, Argentina",
        "venues": [
            {
                "sub_name_abbr": "conf/iwpc/2017",
                "sub_name": "Proceedings of the 25th International Conference on Program Comprehension, ICPC 2017, Buenos Aires, Argentina, May 22-23, 2017.",
                "count": 41,
                "papers": [
                    "Do software developers understand open source licenses?",
                    "Software engineers' information seeking behavior in change impact analysis: an interview study.",
                    "How developers document pull requests with external references.",
                    "Variability through the eyes of the programmer.",
                    "Meaningful identifier names: the case of single-letter variables.",
                    "Effects of variable names on comprehension an empirical study.",
                    "Syntax, predicates, idioms: what really affects code complexity?",
                    "Exploiting type hints in method argument names to improve lightweight type inference.",
                    "Binary code clone detection across architectures and compiling configurations.",
                    "Identifying code clones having high possibilities of containing bugs.",
                    "Smells are sensitive to developers!: on the efficiency of (un)guided customized detection.",
                    "On the uniqueness of code redundancies.",
                    "RepDroid: an automated tool for Android application repackaging detection.",
                    "Comprehension of ads-supported and paid Android applications: are they different?",
                    "How professional hackers understand protected code while performing attack tasks.",
                    "NetDroid: summarizing network behavior of Android apps for network code maintenance.",
                    "An exploratory study on the relationship between changes and refactoring.",
                    "Developer-related factors in change prediction: an empirical assessment.",
                    "Analyzing user comments on YouTube coding tutorial videos.",
                    "A comparison of three algorithms for computing truck factors.",
                    "Bug localization with combination of deep learning and information retrieval.",
                    "Bug report enrichment with application of automated fixer recommendation.",
                    "How does execution information help with information-retrieval based bug localization?",
                    "Automatically detecting integrity violations in database-centric applications.",
                    "Constructing feature model by identifying variability-aware modules.",
                    "An empirical study on code comprehension: data context interaction compared to classical object oriented.",
                    "The effect of delocalized plans on spreadsheet comprehension: a controlled experiment.",
                    "The discipline of preprocessor-based annotations does #ifdef TAG n't #endif matter.",
                    "Comprehending studies on program comprehension.",
                    "It's duck (typing) season!",
                    "Replicating parser behavior using neural machine translation.",
                    "Towards automatic generation of short summaries of commits.",
                    "Android repository mining for detecting publicly accessible functions missing permission checks.",
                    "Studying the prevalence of exception handling anti-patterns.",
                    "On the properties of design-relevant classes for design anomaly assessment.",
                    "Removing code clones from industrial systems using compiler directives.",
                    "Language-independent information flow tracking engine for program comprehension tools.",
                    "The code time machine.",
                    "FindSmells: flexible composition of bad smell detection strategies.",
                    "Docio: documenting API input/output examples.",
                    "MetricAttitude++: enhancing polymetric views with information retrieval."
                ]
            }
        ]
    },
    {
        "year": "2016",
        "name": "24th ICPC 2016",
        "info": "Austin, TX, USA",
        "venues": [
            {
                "sub_name_abbr": "conf/iwpc/2016",
                "sub_name": "24th IEEE International Conference on Program Comprehension, ICPC 2016, Austin, TX, USA, May 16-17, 2016.",
                "count": 45,
                "papers": [
                    "A textual-based technique for Smell Detection.",
                    "Context-based code smells prioritization for prefactoring.",
                    "Do code smells hamper novice programming? A controlled experiment on Scratch programs.",
                    "Improving code readability models with textual features.",
                    "Multistaging to understand: Distilling the essence of java code examples.",
                    "Navigating the WordPress plugin landscape.",
                    "A case study of program comprehension effort and technical debt estimations.",
                    "On method ordering.",
                    "Identifying modularization patterns by visual comparison of multiple hierarchies.",
                    "Glyph-based software component identification.",
                    "Taming the IDE with fine-grained interaction data.",
                    "Learning to rank for bug report assignee recommendation.",
                    "Can we find stable alternatives for unstable Eclipse interfaces?",
                    "A cooperative approach for combining client-based and library-based API usage pattern mining.",
                    "A novel approach for estimating Truck Factors.",
                    "Can we enforce a benefit for dynamically typed languages in comparison to statically typed ones? A controlled experiment.",
                    "Identifying functionally similar code in complex codebases.",
                    "On automatically detecting similar Android apps.",
                    "Rule-directed code clone synchronization.",
                    "Are unreachable methods harmful? Results from a controlled experiment.",
                    "Investigating the android apps' success: An empirical study.",
                    "Retrofitting automatic testing through library tests reusing.",
                    "Measuring energy footprint of software features.",
                    "Human-machine resolution of Invisible Control Flow?",
                    "Extracting configuration parameter interactions using static analysis.",
                    "Android build dependency analysis.",
                    "Software development and tool usability.",
                    "Detecting exploratory programming behaviors for introductory programming exercises.",
                    "Embedding programming context into source code.",
                    "Synchronized static and dynamic visualization in a web-based programming environment.",
                    "Case studies of optimized sequence diagram for program comprehension.",
                    "Comprehending source code of large software system for reuse.",
                    "Defending against the attack of the micro-clones.",
                    "Towards quality gates in continuous delivery and deployment.",
                    "Revisiting the relationship between code smells and refactoring.",
                    "Generating clone references with less human subjectivity.",
                    "Understanding interactive debugging with Swarm Debug Infrastructure.",
                    "FeedBaG: An interaction tracker for Visual Studio.",
                    "InfectoMeter: A tool that helps to place bug fixes.",
                    "INLINE: Now you're coding with portals.",
                    "WAVI: A reverse engineering tool for web applications.",
                    "PORBS: A parallel observation-based slicer.",
                    "STAC: A tool for Static Textual Analysis of Code.",
                    "Hey! Are you injecting side effect?: A tool for detecting purity changes in java methods.",
                    "WB4SP: A tool to build the word base for specific programs."
                ]
            }
        ]
    },
    {
        "year": "2015",
        "name": "23rd ICPC 2015",
        "info": "Florence/Firenze, Italy",
        "venues": [
            {
                "sub_name_abbr": "conf/iwpc/2015",
                "sub_name": "Proceedings of the 2015 IEEE 23rd International Conference on Program Comprehension, ICPC 2015, Florence/Firenze, Italy, May 16-24, 2015.",
                "count": 39,
                "papers": [
                    "Test complement exclusion: guarantees from dynamic analysis.",
                    "Concise and consistent naming: ten years later.",
                    "Discovering loners and phantoms in commit and issue data.",
                    "Detection of software evolution phases based on development activities.",
                    "I know what you did last summer: an investigation of how developers spend their time.",
                    "RCLinker: automated linking of issue reports and commits leveraging rich contextual information.",
                    "Generating reproducible and replayable bug reports from Android application crashes.",
                    "Active semi-supervised defect categorization.",
                    "Could we infer unordered API usage patterns only using the library source code?",
                    "Searching the state space: a qualitative study of API protocol usability.",
                    "Synonym suggestion for tags on stack overflow.",
                    "Code, camera, action: how software developers document and share program knowledge using YouTube.",
                    "Generating refactoring proposals to remove clones from automated system tests.",
                    "Framework instantiation using cookbooks constructed with static and dynamic analysis.",
                    "Two user perspectives in program comprehension: end users and developer users.",
                    "Exploring the use of concern element role information in feature location evaluation.",
                    "Rethinking user interfaces for feature location.",
                    "Detecting clones in Android applications through analyzing user interfaces.",
                    "Manually locating features in industrial source code: the search actions of software nomads.",
                    "From obfuscation to comprehension.",
                    "The plague doctor: a promising cure for the window plague.",
                    "Polymorphism in the spotlight: studying its prevalence in Java and Smalltalk.",
                    "A survey of the forms of Java reference names.",
                    "Make it simple: an empirical analysis of GNU make feature use in open source projects.",
                    "License usage and changes: a large-scale study of Java projects on GitHub.",
                    "Unsupervised software categorization using bytecode.",
                    "The last line effect.",
                    "How programmers read regular code: a controlled experiment using eye tracking.",
                    "Eye movements in code reading: relaxing the linear order.",
                    "Comparing trace visualizations for program comprehension through controlled experiments.",
                    "Towards visual reflexion models.",
                    "Understanding web applications using component based visual patterns.",
                    "Fault localization during system testing.",
                    "Recovering workflows from functional tests.",
                    "Reordering results of keyword-based code search for supporting simultaneous code changes.",
                    "VerXCombo: an interactive data visualization of popular library version combinations.",
                    "ITMViz: interactive topic modeling for source code analysis.",
                    "ExceptionTracer: a solution recommender for exceptions in an integrated development environment.",
                    "Limpio: LIghtweight MPI instrumentatiOn."
                ]
            }
        ]
    },
    {
        "year": "2014",
        "name": "22nd ICPC 2014",
        "info": "Hyderabad, India",
        "venues": [
            {
                "sub_name_abbr": "conf/iwpc/2014",
                "sub_name": "22nd International Conference on Program Comprehension, ICPC 2014, Hyderabad, India, June 2-3, 2014.",
                "count": 43,
                "papers": [
                    "Innovating in india: designing for constraint, computing for inclusion (keynote).",
                    "The MoJo family: a story about clustering evaluation (invited talk).",
                    "Do architectural design decisions improve the understanding of software architecture? two controlled experiments.",
                    "Revealing the relationship between architectural elements and source code characteristics.",
                    "Understanding LDA in source code analysis.",
                    "A diagnosis-based approach to software comprehension.",
                    "dsOli: data structure operation location and identification.",
                    "Version history, similar report, and structure: putting them together for improved bug localization.",
                    "Understanding the database manipulation behavior of programs.",
                    "On mapping releases to commits in open source systems.",
                    "Ranking crowd knowledge to assist software development.",
                    "How do API changes trigger stack overflow discussions? a study on the Android SDK.",
                    "Towards more accurate content categorization of API discussions.",
                    "CODES: mining source code descriptions from developers discussions.",
                    "Condensing class diagrams by analyzing design and network metrics using optimistic classification.",
                    "An information visualization feature model for supporting the selection of software visualizations.",
                    "Enabling integrated development environments with natural user interface interactions.",
                    "Amalgamating source code authors, maintainers, and change proneness to triage change requests.",
                    "Mining unit tests for code recommendation.",
                    "Recommending automated extract method refactorings.",
                    "Identifying and locating interference issues in PHP applications: the case of WordPress.",
                    "Prioritizing maintainability defects based on refactoring recommendations.",
                    "How the evolution of emerging collaborations relates to code changes: an empirical study.",
                    "On the effect of code regularity on comprehension.",
                    "Capturing software traceability links from developers' eye gazes.",
                    "Comprehension support during knowledge transitions: learning from field.",
                    "A visualization tool recording historical data of program comprehension tasks.",
                    "An empirical comparison of static and dynamic type systems on API usage in the presence of an IDE: Java vs. groovy with eclipse.",
                    "What is the foundation of evidence of human factors decisions in language design? an empirical study on programming language workshops.",
                    "Domain matters: bringing further evidence of the relationships among anti-patterns, application domains, and quality-related metrics in Java mobile apps.",
                    "SCQAM: a scalable structured code quality assessment method for industrial software.",
                    "Repeatedly-executed-method viewer for efficient visualization of execution paths and states in Java.",
                    "A formal evaluation of DepDegree based on weyuker's properties.",
                    "Hey! are you committing tangled changes?",
                    "A semiautomated method for classifying program analysis rules into a quality model.",
                    "An approach for evaluating and suggesting method names using n-gram models.",
                    "Cross-language bug localization.",
                    "Automatic documentation generation via source code summarization of method context.",
                    "Improving topic model source code summarization.",
                    "A code obfuscation framework using code clones.",
                    "JCSD: visual support for understanding code control structure.",
                    "Plagiarism detection for multithreaded software based on thread-aware software birthmarks.",
                    "Redacting sensitive information in software artifacts."
                ]
            }
        ]
    },
    {
        "year": "2013",
        "name": "21st ICPC 2013",
        "info": "San Francisco, CA, USA",
        "venues": [
            {
                "sub_name_abbr": "conf/iwpc/2013",
                "sub_name": "IEEE 21st International Conference on Program Comprehension, ICPC 2013, San Francisco, CA, USA, 20-21 May, 2013.",
                "count": 31,
                "papers": [
                    "Improving program comprehension by answering questions (keynote).",
                    "Part-of-speech tagging of program identifiers for improved text-based software engineering tools.",
                    "Evaluating source code summarization techniques: Replication and expansion.",
                    "Automatic generation of natural language summaries for Java classes.",
                    "An empirical study on the efficiency of graphical vs. textual representations in requirements comprehension.",
                    "SArF map: Visualizing software architecture from feature and layer viewpoints.",
                    "Multiscale visual comparison of execution traces.",
                    "In situ understanding of performance bottlenecks through visually augmented code.",
                    "Monitoring user interactions for supporting failure reproduction.",
                    "Quality analysis of source code comments.",
                    "Gapped code clone detection with lightweight source code analysis.",
                    "Insight into a method co-change pattern to identify highly coupled methods: An empirical study.",
                    "Patterns of cross-language linking in java frameworks.",
                    "Using code ownership to improve IR-based Traceability Link Recovery.",
                    "Structural information based term weighting in text retrieval for feature location.",
                    "Extracting problematic API features from forum discussions.",
                    "Multi-dimensional exploration of API usage.",
                    "Evaluating software clustering algorithms in the context of program comprehension.",
                    "On the accuracy of Architecture Compliance Checking support Accuracy of dependency analysis and violation reporting.",
                    "Building extensions for applications: Towards the understanding of extension possibilities.",
                    "On the understanding of programs with continuous code reviews.",
                    "Applying clone change notification system into an industrial development process.",
                    "Manhattan: Supporting real-time visual team activity awareness.",
                    "Blogging developer knowledge: Motivations, challenges, and future directions.",
                    "Towards generating human-oriented summaries of unit test cases.",
                    "Towards a unified software attack model to assess software protections.",
                    "Improving the detection accuracy of evolutionary coupling.",
                    "Agec: An execution-semantic clone detection tool.",
                    "JSummarizer: An automatic generator of natural language summaries for Java classes.",
                    "OnionUML: An Eclipse plug-in for visualizing UML class diagrams in onion graph notation.",
                    "SimCad: An extensible and faster clone detection tool for large scale software systems."
                ]
            }
        ]
    },
    {
        "year": "2012",
        "name": "20th ICPC 2012",
        "info": "Passau, Germany",
        "venues": [
            {
                "sub_name_abbr": "conf/iwpc/2012",
                "sub_name": "IEEE 20th International Conference on Program Comprehension, ICPC 2012, Passau, Germany, June 11-13, 2012.",
                "count": 38,
                "papers": [
                    "Agile software assessment (Invited paper).",
                    "Studying developers for fun and profit: (Keynote abstract).",
                    "A retrospective view on: The role of concepts in program comprehension: (MIP award).",
                    "Program complexity metrics and programmer opinions.",
                    "Women and men - Different but equal: On the impact of identifier style on source code reading.",
                    "A lightweight visualization of interprocedural data-flow paths for source code reading.",
                    "Is the derivation of a model easier to understand than the model itself?",
                    "Evaluating forum discussions to inform the design of an API critic.",
                    "Mining source code descriptions from developer communications.",
                    "Measuring programming experience.",
                    "High-MCC functions in the Linux kernel.",
                    "Understanding registration-based abstractions: A quantitative user study.",
                    "Concern-based cohesion: Unveiling a hidden dimension of cohesion measurement.",
                    "Understanding reuse in the Android Market.",
                    "Programmer information needs after memory failure.",
                    "Identifying computational phases from inter-process communication traces of HPC applications.",
                    "Tracking and visualizing information flow in component-based systems.",
                    "Do static type systems improve the maintainability of software systems? An empirical study.",
                    "Professional status and expertise for UML class diagram comprehension: An empirical study.",
                    "Modeling the ownership of source code topics.",
                    "A semantic relatedness approach for traceability link recovery.",
                    "Using IR methods for labeling source code artifacts: Is it worthwhile?",
                    "A TraceLab-based solution for creating, conducting, and sharing feature location experiments.",
                    "Can clone detection support test comprehension?",
                    "A controlled experiment on software clones.",
                    "Code querying by UML.",
                    "CriticAL: A critic for APIs and libraries.",
                    "Supporting comprehension experiments with human subjects.",
                    "SeByte: A semantic clone detection tool for intermediate languages.",
                    "CRat: A refactoring support tool for Form Template Method.",
                    "Toward structured location of features.",
                    "Extraction and improvement of conditionally compiled product line code.",
                    "Applying bioinformatics in the analysis of software variants.",
                    "Parallel code clone detection using MapReduce.",
                    "Automatic software architecture recovery: A machine learning approach.",
                    "Toward an effective automated tracing process.",
                    "Characterization of the Linux configuration system.",
                    "Leveraging clone detection for Internet-scale source code search."
                ]
            }
        ]
    },
    {
        "year": "2011",
        "name": "19th ICPC 2011",
        "info": "Kingston, ON, Canada",
        "venues": [
            {
                "sub_name_abbr": "conf/iwpc/2011",
                "sub_name": "The 19th IEEE International Conference on Program Comprehension, ICPC 2011, Kingston, ON, Canada, June 22-24, 2011.",
                "count": 47,
                "papers": [
                    "Keynotes.",
                    "Invited Talk.",
                    "Clustering Support for Static Concept Location in Source Code.",
                    "Can Better Identifier Splitting Techniques Help Feature Location?",
                    "Improving IR-based Traceability Recovery Using Smoothing Filters.",
                    "The Influence of the Task on Programmer Behaviour.",
                    "Precise and Scalable Querying of Syntactical Source Code Patterns Using Sample Code Snippets and a Database.",
                    "Is Aspect-Oriented Programming a Rewarding Investment into Future Code Changes? A Socio-technical Study on Development and Maintenance Time.",
                    "SmartGroups: Focusing on Task-Relevant Source Artifacts in IDEs.",
                    "Generating Parameter Comments and Integrating with Method Summaries.",
                    "Design Defects Detection and Correction by Example.",
                    "Obstacles in Using Frameworks and APIs: An Exploratory Study of Programmers' Newsgroup Discussions.",
                    "Collective Code Bookmarks for Program Comprehension.",
                    "Trust-Based Requirements Traceability.",
                    "AspectMaps: A Scalable Visualization of Join Point Shadows.",
                    "Reasoning about Faults in Aspect-Oriented Programs: A Metrics-Based Evaluation.",
                    "Comparison of a Visual and a Textual Notation to Express Data Constraints in Aspect-Oriented Join Point Selections: A Controlled Experiment.",
                    "Exploring Large-Scale System Similarity Using Incremental Clone Detection and Live Scatterplots.",
                    "Software Evolution Comprehension: Replay to the Rescue.",
                    "Feature Profiling for Evolving Systems.",
                    "MTF: A Scalable Exchange Format for Traces of High Performance Computing Systems.",
                    "A Lightweight Approach to Uncover Technical Artifacts in Unstructured Data.",
                    "On Visualization and Comprehension of Scenario-Based Programs.",
                    "Faceted Navigation for Software Exploration.",
                    "Subvocalization - Toward Hearing the Inner Thoughts of Developers.",
                    "Adding Process Metrics to Enhance Modification Complexity Prediction.",
                    "Capturing Expert Knowledge for Automated Configuration Fault Diagnosis.",
                    "Change Impact Analysis: An Earthquake Metaphor.",
                    "Programming from the Reader's Perspective: Toward an Expectations Approach.",
                    "Toward Intuitive Programming Languages.",
                    "Industrial Case Study on Supporting the Comprehension of System Behaviour under Load.",
                    "DebCheck: Efficient Checking for Open Source Code Clones in Software Systems.",
                    "The NiCad Clone Detector.",
                    "Anomaly Detection by Monitoring Filesystem Activities.",
                    "SeClone - A Hybrid Approach to Internet-Scale Real-Time Code Clone Search.",
                    "The Concept of Stratified Sampling of Execution Traces.",
                    "Industrial Program Comprehension Challenge 2011: Archeology and Anthropology of Embedded Control Systems.",
                    "Trustrace: Improving Automated Trace Retrieval through Resource Trust Analysis.",
                    "On the Effect of the Query in IR-based Concept Location.",
                    "Scalable Automatic Concept Mining from Execution Traces.",
                    "An Empirical Study of the Impacts of Clones in Software Maintenance.",
                    "Towards a Benchmark and Automatic Calibration for IR-Based Concept Location.",
                    "Satisfying Programmers' Information Needs in API-Based Programming.",
                    "A Systematic Analysis of Software Architecture Visualization Techniques.",
                    "Context and Vision: Studying Two Factors Impacting Program Comprehension.",
                    "Modeling Framework API Evolution as a Multi-objective Optimization Problem.",
                    "Conflict-Aware Optimal Scheduling of Code Clone Refactoring: A Constraint Programming Approach."
                ]
            }
        ]
    },
    {
        "year": "2010",
        "name": "18th ICPC 2010",
        "info": "Braga, Minho, Portugal",
        "venues": [
            {
                "sub_name_abbr": "conf/iwpc/2010",
                "sub_name": "The 18th IEEE International Conference on Program Comprehension, ICPC 2010, Braga, Minho, Portugal, June 30-July 2, 2010.",
                "count": 42,
                "papers": [
                    "Case Study of Feature Location Using Dependence Graph, after 10 Years.",
                    "Automatic Extraction of a WordNet-Like Identifier Network from Software.",
                    "Using Data Fusion and Web Mining to Support Feature Location in Software.",
                    "Extracting Source Code from E-Mails.",
                    "Visual Support for Understanding Product Lines.",
                    "Patrools: Visualizing the Polymorphic Usage of Class Hierarchies.",
                    "Renaming Parts of Identifiers Consistently within Code Clones.",
                    "DepDigger: A Tool for Detecting Complex Low-Level Dependencies.",
                    "CheckDep: A Tool for Tracking Software Dependencies.",
                    "Featureous: A Tool for Feature-Centric Analysis of Java Software.",
                    "DynaRIA: A Tool for Ajax Web Application Comprehension.",
                    "The ConAn Tool to Identify Crosscutting Concerns in Object Oriented Systems.",
                    "Unibench: A Tool for Automated and Collaborative Benchmarking.",
                    "Recovering Traceability Links between Business Process and Software System Components.",
                    "Multi-touch for Software Exploration.",
                    "Towards Developing a Meta-model for Comprehending Software Adaptability.",
                    "Sound as an Aid in Understanding Low-Level Program Architecture.",
                    "SVS, BORS, SVSi: Three Strategies to Relate Problem and Program Domains.",
                    "Contract-Based Slicing Helps on Safety Reuse.",
                    "On the Comparability of Software Clustering Algorithms.",
                    "On the Equivalence of Information Retrieval Methods for Automated Traceability Link Recovery.",
                    "Recognizing Sorting Algorithms with the C4.5 Decision Tree Classifier.",
                    "A Technique for Just-in-Time Clone Detection in Large Scale Systems.",
                    "A Simple and Effective Measure for Complex Low-Level Dependencies.",
                    "Understanding and Auditing the Licensing of Open Source Software Distributions.",
                    "Utilizing Web Search Engines for Program Analysis.",
                    "Vivisection of a Non-Executable, Domain-Specific Language - Understanding (the Usage of) the P3P Language.",
                    "Visualizing the Results of Field Testing.",
                    "Studying the Impact of Social Structures on Software Quality.",
                    "An Exploratory Study of Factors Influencing Change Entropy.",
                    "Exploring the Relationships between Design Metrics and Package Understandability: A Case Study.",
                    "Measuring Class Importance in the Context of Design Evolution.",
                    "A Cognitive Model for Software Architecture Complexity.",
                    "Natural Language Parsing of Program Element Names for Concept Extraction.",
                    "Identification of Idiom Usage in C++ Generic Libraries.",
                    "Aiding Software Maintenance with Copy-and-Paste Clone-Awareness.",
                    "Using the Kleinberg Algorithm and Vector Space Model for Software System Clustering.",
                    "From Program Comprehension to People Comprehension.",
                    "Influence of Synchronized Domain Visualizations on Program Comprehension.",
                    "An Eye Tracking Study on camelCase and under_score Identifier Styles.",
                    "My Repository Runneth Over: An Empirical Study on Diversifying Data Sources to Improve Feature Search.",
                    "Connecting Traces: Understanding Client-Server Interactions in Ajax Applications."
                ]
            }
        ]
    },
    {
        "year": "2009",
        "name": "17th ICPC 2009",
        "info": "Vancouver, BC, Canada",
        "venues": [
            {
                "sub_name_abbr": "conf/iwpc/2009",
                "sub_name": "The 17th IEEE International Conference on Program Comprehension, ICPC 2009, Vancouver, British Columbia, Canada, May 17-19, 2009.",
                "count": 56,
                "papers": [
                    "Intensions are a key to program comprehension.",
                    "Variable granularity for improving precision of impact analysis.",
                    "Automatically identifying changes that impact code-to-design traceability.",
                    "Automatic classication of large changes into maintenance categories.",
                    "A plethora of paths.",
                    "Practical static analysis for inference of security-related program properties.",
                    "Impact analysis and visualization toolkit for static crosscutting in AspectJ.",
                    "BugFix: A learning-based tool to assist developers in fixing bugs.",
                    "Resumption strategies for interrupted programming tasks.",
                    "Using activity traces to characterize programming behaviour beyond the lab.",
                    "An in-vivo study of the cognitive levels employed by programmers during software maintenance.",
                    "Trace visualization for program comprehension: A controlled experiment.",
                    "Using spoken text to aid debugging: An empirical study.",
                    "Sonification design guidelines to enhance program comprehension.",
                    "Instrumenting time-sensitive software for feature location.",
                    "Crosscutting patterns and design stability: An exploratory analysis.",
                    "On the role of the nouns in IR-based traceability recovery.",
                    "To camelcase or under_score.",
                    "Reading the documentation of invoked API functions in program comprehension.",
                    "The effectiveness of source code obfuscation: An experimental assessment.",
                    "The loss of architectural knowledge during system evolution: An industrial case study.",
                    "Dn-based architecture assessment of Java Open Source software systems.",
                    "Standing on the shoulders of giants - A data fusion approach to design pattern detection.",
                    "An exploratory study on assessing feature location techniques.",
                    "Natural language parsing for fact extraction from source code.",
                    "An empirical exploration of regularities in open-source software lexicons.",
                    "Vector space analysis of software clones.",
                    "CnP: Towards an environment for the proactive management of copy-and-paste programming.",
                    "Syntax tree fingerprinting for source code similarity detection.",
                    "Methods for selecting and improving software clustering algorithms.",
                    "Supporting task-oriented navigation in IDEs with configurable HeatMaps.",
                    "A case for concept programs.",
                    "Profile-based type reconstruction for decompilation.",
                    "An empirical study on the comprehension of stereotyped UML class diagram layouts.",
                    "Who can help me with this change request?",
                    "Working session: Using eye-tracking to understand program comprehension.",
                    "TDD = too dumb developers? Implications of Test-Driven Development on maintainability and comprehension of software.",
                    "OGAN: Visualizing object interaction scenarios based on dynamic interaction context.",
                    "CRISTA: A tool to support code comprehension based on visualization and reading technique.",
                    "Kenyon-web: Reconfigurable web-based feature extractor.",
                    "Prototyping synchronization policies for existing programs.",
                    "Proposing a visual approach to support the characterization of software comprehension activities.",
                    "SODBeans.",
                    "Design pattern directed clustering for understanding open source code.",
                    "A bug you like: A framework for automated assignment of bugs.",
                    "Creating task-based concern maps by merging concern fragments.",
                    "Towards pie tree visualization of graphs and large software architectures.",
                    "Structure transition graphs: An ECG for program comprehension?",
                    "Enabling more precise dependency analysis in event-based systems.",
                    "Observation of Open Source programmers' information seeking.",
                    "Creating and maintaining tutorials with DEFT.",
                    "Improving program comprehension by enhancing program constructs: An analysis of the Umple language.",
                    "Capturing Java naming conventions with first-order Markov models.",
                    "Automatic detection of internal queues and stages in message processing systems.",
                    "TaskBoard: Tracking pertinent task artifacts and plans.",
                    "Representing source code with Granular hierarchical structures."
                ]
            }
        ]
    },
    {
        "year": "2008",
        "name": "16th ICPC 2008",
        "info": "Amsterdam, The Netherlands",
        "venues": [
            {
                "sub_name_abbr": "conf/iwpc/2008",
                "sub_name": "The 16th IEEE International Conference on Program Comprehension, ICPC 2008, Amsterdam, The Netherlands, June 10-13, 2008.",
                "count": 36,
                "papers": [
                    "Scalable Program Comprehension for Analyzing Complex Defects.",
                    "The Reuse of Grammars with Embedded Semantic Actions.",
                    "Partial Domain Comprehension in Software Evolution and Maintenance.",
                    "Refining Existing Theories of Program Comprehension During Maintenance for Concurrent Software.",
                    "Identifying Architectural Change Patterns in Object-Oriented Systems.",
                    "A Toolkit for Visualizing the Runtime Behavior of TinyOS Applications.",
                    "CERBERUS: Tracing Requirements to Source Code Using Information Retrieval, Dynamic Analysis, and Program Analysis.",
                    "Exploiting Runtime Information in the IDE.",
                    "Do Dynamic Object Process Graphs Support Program Understanding? - A Controlled Experiment.",
                    "Impact of Limited Memory Resources.",
                    "Data Model Comprehension: An Empirical Comparison of ER and UML Class Diagrams.",
                    "A Traceability Technique for Specifications.",
                    "On the Use of Domain Terms in Source Code.",
                    "Identifying Word Relations in Software: A Comparative Study of Semantic Similarity Tools.",
                    "Reading Beside the Lines: Indentation as a Proxy for Complexity Metric.",
                    "Mendel: A Model, Metrics, and Rules to Understand Class Hierarchies.",
                    "Scenario-Based Comparison of Clone Detection Techniques.",
                    "Combining Preprocessor Slicing with C/C++ Language Slicing.",
                    "NICAD: Accurate Detection of Near-Miss Intentional Clones Using Flexible Pretty-Printing and Code Normalization.",
                    "What's a Typical Commit? A Characterization of Open Source Software Repositories.",
                    "Assessing Software Archives with Evolutionary Clusters.",
                    "Reusing Program Investigation Knowledge for Code Understanding.",
                    "Automated Identification of Tasks in Development Sessions.",
                    "Re-Engineering a Reverse Engineering Portal to a Distributed SOA.",
                    "Checklist Inspections and Modifications: Applying Bloom's Taxonomy to Categorise Developer Comprehension.",
                    "Aspect Mining in Procedural Object Oriented Code.",
                    "An Approach for Mapping Features to Code Based on Static and Dynamic Analysis.",
                    "Evaluating the Reference and Representation of Domain Concepts in APIs.",
                    "Ensuring Well-Behaved Usage of APIs through Syntactic Constraints.",
                    "A Tool for Visual Understanding of Source Code Dependencies.",
                    "How to Interconnect Operational and Behavioral Views of Web Applications.",
                    "Locating and Understanding Features of Complex Software Systems by Synchronizing Time-, Collaboration- and Code-Focused Views on Execution Traces.",
                    "Support for Understanding GUI Programs by Visualizing Execution Traces Synchronized with Screen Transitions.",
                    "Semantic Technologies in System Maintenance (STSM 2008).",
                    "Industrial Realities of Program Comprehension (IRPC 2008).",
                    "Query Technologies and Applications for Program Comprehension (QTAPC 2008)."
                ]
            }
        ]
    },
    {
        "year": "2007",
        "name": "15th ICPC 2007",
        "info": "Banff, Alberta, Canada",
        "venues": [
            {
                "sub_name_abbr": "conf/iwpc/2007",
                "sub_name": "15th International Conference on Program Comprehension (ICPC 2007), June 26-29, 2007, Banff, Alberta, Canada.",
                "count": 33,
                "papers": [
                    "Search Based Software Engineering for Program Comprehension.",
                    "Making the Code Look Like the Design - Aspects and Other Recent Work.",
                    "Reducing Program Comprehension Effort in Evolving Software by Recognizing Feature Implementation Convergence.",
                    "Recovering Concepts from Source Code with Automated Concept Identification.",
                    "Combining Formal Concept Analysis with Information Retrieval for Concept Location in Source Code.",
                    "Understanding Execution Traces Using Massive Sequence and Circular Bundle Views.",
                    "Tracking Objects to Detect Feature Dependencies.",
                    "WAD: A Feasibility study using the Wicked Audio Debugger.",
                    "A Hybrid Program Model for Object-Oriented Reverse Engineering.",
                    "From Reality to Programs and (Not Quite) Back Again.",
                    "A Comparative Study of Three Program Exploration Tools.",
                    "Assessing the Comprehension of UML Class Diagrams via Eye Tracking.",
                    "Empirical Evaluation of a UML Sequence Diagram with Adornments to Support Understanding of Thread Interactions.",
                    "Detecting Interaction Coupling from Task Interaction Histories.",
                    "Mining Software Repositories for Traceability Links.",
                    "Characterizing and Understanding Development Sessions.",
                    "Evaluating Aspect Mining Techniques: A Case Study.",
                    "Using Bayesian Belief Networks to Predict Change Propagation in Software Systems.",
                    "A Non-conservative Approach to Software Pattern Detection.",
                    "Recovering Workflows from Multi Tiered E-commerce Systems.",
                    "Error Report Driven Post-Mortem Analysis.",
                    "Interactive Views to Improve the Comprehension of UML Models - An Experimental Validation.",
                    "Program Comprehension through Software Habitability.",
                    "Scenario Explorer: Interactive Visualization of Use Cases.",
                    "Metrics for Measuring the Effectiveness of Decompilers and Obfuscators.",
                    "Constructing Usage Scenarios for API Redocumentation.",
                    "Software Comprehension through Concern-based Queries.",
                    "Enforcing Constraints Between Documentary Comments and Source Code.",
                    "15 Years of Program Comprehension.",
                    "Designing your Next Empirical Study on Program Comprehension.",
                    "Comprehending Aspect-Oriented Programs: Challenges and Open Issues.",
                    "Lagrein: Visualizing User Requirements and Development Effort.",
                    "Use of a Genetic Algorithm to Identify Source Code Metrics Which Improves Cognitive Complexity Predictive Models."
                ]
            }
        ]
    },
    {
        "year": "2006",
        "name": "14th ICPC 2006",
        "info": "Athens, Greece",
        "venues": [
            {
                "sub_name_abbr": "conf/iwpc/2006",
                "sub_name": "14th International Conference on Program Comprehension (ICPC 2006), 14-16 June 2006, Athens, Greece.",
                "count": 43,
                "papers": [
                    "Evolving a Legacy Application Portfolio at Sallie Mae: Program Comprehension and Beyond.",
                    "Program Redocumentation: Lessons Learned & Future Challenges.",
                    "What's in a Name? A Study of Identifiers.",
                    "Building Usage Contexts During Program Comprehension.",
                    "Digging the Development Dust for Refactorings.",
                    "Classifying Change Types for Qualifying Change Couplings.",
                    "Studying the Evolution of Software Systems Using Change Clusters.",
                    "How Developers Copy.",
                    "A Synergistic Approach to Program Comprehension.",
                    "How Webmining and Coupling Metrics Improve Early Program Comprehension.",
                    "Programs are Knowledge Bases.",
                    "Dynamic Analysis of Software Systems using Execution Pattern Mining.",
                    "Layered Program Auralization: Using Music to Increase Runtime Program Comprehension and Debugging Effectiveness.",
                    "Integrating Reverse Engineering Tools Using a Service-Sharing Methodology.",
                    "An Architecture to Support Model Driven Software Visualization.",
                    "Using Abstraction-driven Slicing for Postmortem Analysis of Software.",
                    "Automated Extraction of Database Interactions in Web Applications.",
                    "An Approach for Extracting Workflows from E-Commerce Applications.",
                    "Combining Probabilistic Ranking and Latent Semantic Indexing for Feature Identification.",
                    "Leveraged Quality Assessment using Information Retrieval Techniques.",
                    "A Metric-Based Heuristic Framework to Detect Object-Oriented Design Flaws.",
                    "Identification of Design Roles for the Assessment of Design Quality in Enterprise Applications.",
                    "Summarizing the Content of Large Traces to Facilitate the Understanding of the Behaviour of a Software System.",
                    "Dynamic Data Structure Analysis for Java Programs.",
                    "An Approach to High-Level Behavioral Program Documentation Allowing Lightweight Verification.",
                    "Profile-Based Approach to Support Comprehension of Software Behavior.",
                    "The Sound of Software: Using Sonification to Aid Comprehension.",
                    "Experimental Settings in Program Comprehension: Challenges and Open Issues.",
                    "Working Session: Program Comprehension and Migration Strategies for Web Service and Service-Oriented Architectures.",
                    "The Cognitive Assignment Eclipse Plug-in.",
                    "INFORM: A Framework for Performance Informed Software Development.",
                    "Evolution Storyboards: Visualization of Software Structure Dynamics.",
                    "JIRiSS - an Eclipse plug-in for Source Code Exploration.",
                    "Alborz: An Interactive Toolkit to Extract Static and Dynamic Views of a Software System.",
                    "Fluid Source Code Views.",
                    "JComp: A Reuse-Driven Componentization Framework for Java Applications.",
                    "Understanding Obfuscated Code.",
                    "A Context-Aware Analysis Scheme for Bloom's Taxonomy.",
                    "Towards a Client Driven Characterization of Class Hierarchies.",
                    "Reverse Engineering Scripting Language Extensions.",
                    "Can Information Retrieval Techniques Effectively Support Traceability Link Recovery?",
                    "Improving Comprehensibility of Source Code via Traceability Information: a Controlled Experiment.",
                    "Programmer-friendly Decompiled Java."
                ]
            }
        ]
    },
    {
        "year": "2005",
        "name": "13th IWPC 2005",
        "info": "St. Louis, MO, USA",
        "venues": [
            {
                "sub_name_abbr": "conf/iwpc/2005",
                "sub_name": "13th International Workshop on Program Comprehension (IWPC 2005), 15-16 May 2005, St. Louis, MO, USA.",
                "count": 44,
                "papers": [
                    "Message from the Chairs.",
                    "Conference Committees.",
                    "Sponsoring Organizations.",
                    "Comprehension by Derivation.",
                    "A Qualitative Comparison of Three Aspect Mining Techniques.",
                    "Understanding Concerns in Software: Insights Gained from Two Case Studies.",
                    "Static Techniques for Concept Location in Object-Oriented Code.",
                    "Presenting Micro-Theories of Program Comprehension in Pattern Form.",
                    "An Investigation into Professional Programmers' Mental Representations of Variables.",
                    "An Investigation of Java Abstraction Usage for Program Modifications.",
                    "Identifying and Addressing Problems in Framework Reuse.",
                    "What Can Programmer Questions Tell Us About Frameworks?",
                    "Concise and Consistent Naming.",
                    "Working Session: Textual Views of Source Code to Support Comprehension.",
                    "On the Comprehension of Security Risk Scenarios.",
                    "Modelling the Information-Seeking Behaviour of Programmers - An Empirical Approach.",
                    "A COTS Component Comprehension Process.",
                    "The CodeSurfer Software Understanding Platform.",
                    "JRipples: A Tool for Program Comprehension during Incremental Change.",
                    "HyperSoft System: Tool Demonstration and Use Example.",
                    "SEAT: A Usable Trace Analysis Tool.",
                    "REGoLive: Web Site Comprehension with Viewpoints.",
                    "Tool Demonstration: CHET: Checking Specifications in Java Systems.",
                    "Tool Demonstration: JIVE and JOVE: Java as it Happens.",
                    "NavTracks: Supporting Navigation in Software.",
                    "Browsing Software Architectures With LSEdit.",
                    "Theories, Methods and Tools in Program Comprehension: Past, Present and Future.",
                    "Design and Implementation of an Extensible and Modifiable Refactoring Tool.",
                    "Detecting and Visualizing Refactorings from Software Archives.",
                    "Understanding Object-Oriented Source Code from the Behavioural Perspective.",
                    "An (Architecture-Centric) Approach for Tracing, Organizing, and Understanding Events in Event-Based Software Architectures.",
                    "System Evolution Tracking through Execution Trace Analysis.",
                    "Efficient Monitoring and Display of Thread State in Java.",
                    "Clustering Software Artifacts Based on Frequent Common Changes.",
                    "Software Clustering based on Omnipresent Object Detection.",
                    "Achieving a Reuse Perspective within a Component Recovery Process: An Industrial Scale Case Study.",
                    "Working Session on Interoperable Reengineering Services.",
                    "Adding Control-Flow to a Visual Data-Flow Representation.",
                    "Supporting the Evolution of a Software Visualization Tool Through Usability Studies.",
                    "On Evaluating the Layout of UML Class Diagrams for Program Comprehension.",
                    "An Empirical Study of the Use of Friends in C++ Software.",
                    "Understanding Cloned Patterns in Web Applications.",
                    "Visualizing the Behavior of Dynamically Modifiable Code.",
                    "A Small Social History of Software Architecture."
                ]
            }
        ]
    },
    {
        "year": "2004",
        "name": "12th IWPC 2004",
        "info": "Bari, Italy",
        "venues": [
            {
                "sub_name_abbr": "conf/iwpc/2004",
                "sub_name": "12th International Workshop on Program Comprehension (IWPC 2004), 24-26 June 2004, Bari, Italy.",
                "count": 33,
                "papers": [
                    "Program Comprehension in Generative Programming: A History of Grand Challenges.",
                    "An Empirical Study on Using Stereotypes to Improve Understanding of UML Models.",
                    "Tool-Supported Customization of UML Class Diagrams for Learning Complex System Models.",
                    "Understanding Class Evolution in Object-Oriented Software.",
                    "A Simple Static Model for Understanding the Dynamic Behavior of Programs.",
                    "Reuse in Reverse Engineering.",
                    "Working in Pairs as a Means for Design Knowledge Building: An Empirical Study.",
                    "Challenges and Requirements for an Effective Trace Exploration Tool.",
                    "Giving Meaning to Macros.",
                    "Building Executable Union Slices using Conditioned Slicing.",
                    "Architectural Views through Collapsing Strategies.",
                    "Understanding CASE Generated Legacy Applications: A Case Study.",
                    "Understanding Web Applications through Dynamic Analysis.",
                    "Reengineering Web Applications Based on Cloned Pattern Analysis.",
                    "Towards a Technique for Reverse Engineering Web Transactions from a User's Perspective.",
                    "Program Comprehension for Web Services.",
                    "Program Comprehension for the Purpose of Testing.",
                    "Structural Evolution of an Open Source System: A Case Study.",
                    "Using Development History Sticky Notes to Understand Software Architecture.",
                    "An Effectiveness Measure for Software Clustering Algorithms.",
                    "An Empirical Study on Keyword-based Web Site Clustering.",
                    "Data Mining Source Code to Facilitate Program Comprehension: Experiments on Clustering Data Retrieved from C++ Programs.",
                    "Empirical Assessment of UML Static Object Diagrams.",
                    "On Migrating a Legacy Application to the Palm Platform.",
                    "Programming Style Changes in Evolving Source Code.",
                    "Resolving Linkage Anomalies in Extracted Software System Models.",
                    "Understanding Modifications in State-Based Models.",
                    "An Eclipse Plug-in for Model Checking.",
                    "Requirements Driven Software Evolution.",
                    "Working Session: Program Comprehension Strategies for Web Service and Service-oriented Architectures.",
                    "Web Services Composition, Execution and Visualization.",
                    "Universal Report: A Generic Reverse Engineering Tool.",
                    "CHIVE - A Program Source Visualisation Framework."
                ]
            }
        ]
    },
    {
        "year": "2003",
        "name": "11th IWPC 2003",
        "info": "Portland, Oregon, USA",
        "venues": [
            {
                "sub_name_abbr": "conf/iwpc/2003",
                "sub_name": "11th International Workshop on Program Comprehension (IWPC 2003), May 10-11, 2003, Portland, Oregon, USA.",
                "count": 38,
                "papers": [
                    "How Understanding and Restructuring Differ from Compiling - A Rewriting Perspective.",
                    "YAAB (Yet Another AST Browser): Using OCL to Navigate ASTs.",
                    "Design Recovery of a Two Level System.",
                    "Effective, Automatic Procedure Extraction.",
                    "Understanding Change-Proneness in OO Software through Visualization.",
                    "Analyzing and Understanding Architectural Characteristics of COM+ Components.",
                    "A Tool For Understanding Multi-Language Program Dependencies.",
                    "Event-Based Performance Analysis.",
                    "Applying the Decorator Pattern for Profiling Object-Oriented Software.",
                    "Automatic Design Pattern Detection.",
                    "Comprehension of Software Analysis Data Using 3D Visualization.",
                    "Identifying Comprehension Bottlenecks Using Program Slicing and Cognitive Complexity Metric.",
                    "Facilitating Program Comprehension by Mining Association Rules from Source Code.",
                    "An XML-Based Lightweight C++ Fact Extractor.",
                    "Generalized Selective XML Markup of Source Code Using Agile Parsing.",
                    "Syntactic Approximation Using Iterative Lexical Analysis.",
                    "Blooms? Taxonomy: A Framework for Assessing Programmers? Knowledge of Software Systems.",
                    "Individual Differences in Program Comprehension Strategies in Unfamiliar Programming Systems.",
                    "Observing and Measuring Cognitive Support: Steps Toward Systematic Tool Evaluation and Engineering.",
                    "Comprehending Reality - Practical Barriers to Industrial Adoption of Software Maintenance Automation.",
                    "Using Clustering to Support the Migration from Static to Dynamic Web Pages.",
                    "Software Components Capture Using Graph Clustering.",
                    "An Optimal Algorithm for MoJo Distance.",
                    "Scaling an Object-Oriented System Execution Visualizer through Sampling.",
                    "Using Run-Time Data for Program Comprehension.",
                    "Are Decomposition Slices Clones?.",
                    "Verification of Recovered Software Architectures.",
                    "Enhancing Domain-Specific Software Architecture Recovery.",
                    "Handling Large Search Space in Pattern-Based Reverse Engineering.",
                    "Workshop on Graphical Documentation for Programmers: Assessing the Efficacy of UML Diagrams for Program Understanding.",
                    "Experiences in Teaching Software Evolution and Program Comprehension.",
                    "Towards a Clone Detection Benchmark Suite and Results Archive.",
                    "TALK2C: A Tool for Automatic Migratio.",
                    "Comprehending and Visualizing Software Based on XML - Representations and Call Graphs.",
                    "Visualizing Interactions in Distributed Java Applications.",
                    "CrocoPat: Efficient Pattern Analysis in Object-Oriented Programs.",
                    "Isolating Cause-Effect Chains with AskIgo.",
                    "gccXfront: Exploiting gcc as a Front End for Program Comprehension Tools via XML/XSLT."
                ]
            }
        ]
    },
    {
        "year": "2002",
        "name": "10th IWPC 2002",
        "info": "Paris, France",
        "venues": [
            {
                "sub_name_abbr": "conf/iwpc/2002",
                "sub_name": "10th International Workshop on Program Comprehension (IWPC 2002), 27-29 June 2002, Paris, France.",
                "count": 30,
                "papers": [
                    "An Open Visualization Toolkit for Reverse Architecting.",
                    "Experience with FADE for the Visualization and Abstraction of Software Views.",
                    "Mining System-User Interaction Traces for Use Case Models.",
                    "Comprehension of Object-Oriented Software Cohesion: The Empirical Quagmire.",
                    "Aspects of Internal Program Documentation - An Elucidative Perspective.",
                    "Pattern-Supported Architecture Recovery.",
                    "Where's the Schema? A Taxonomy of Patterns for Software Exchange.",
                    "Theory-based Analysis of Cognitive Support in Software Comprehension Tools.",
                    "Enhancing Program Comprehension with Recovered State Models.",
                    "An Empirical Study of the Effect of Semantic Differences on Programmer Comprehension.",
                    "Evaluating Using Animation to Improve Understanding of Sequence Diagrams.",
                    "On Using a Benchmark to Evaluate C++ Extractors.",
                    "An Integrated Approach for Studying Architectural Evolution.",
                    "Building Program Understanding Tools Using Visitor Combinators.",
                    "Program Comprehension Experiences with GXL; Comprehension for Comprehension.",
                    "Compression Techniques to Simplify the Analysis of Large Execution Traces.",
                    "Dependence-Cache Slicing: A Program Slicing Method Using Lightweight Dynamic Information.",
                    "Architecture Recovery of Dynamically Linked Applications: A Case Study.",
                    "Fused Data-Centric Visualizations for Software Evolution Environments.",
                    "Evolving Ispell: A Case Study of Program Understanding for Reuse.",
                    "Traceability Recovery in RAD Software Systems.",
                    "Lightweight Impact Analysis using Island Grammars.",
                    "Relocating XML Elements from Preprocessed to Unprocessed Code.",
                    "Using Graph Patterns to Extract Scenarios.",
                    "Slicing Aspect-Oriented Software.",
                    "Comprehending Web Applications by a Clustering Based Approach.",
                    "The Role of Concepts in Program Comprehension.",
                    "Constructivism and Program Comprehension Strategies.",
                    "On Selecting Software Visualization Tools for Program Understanding in an Industrial Context.",
                    "Source Code Files as Structured Documents."
                ]
            }
        ]
    },
    {
        "year": "2001",
        "name": "9th IWPC 2001",
        "info": "Toronto, Ontario, Canada",
        "venues": [
            {
                "sub_name_abbr": "conf/iwpc/2001",
                "sub_name": "9th International Workshop on Program Comprehension (IWPC 2001), 12-13 May 2001, Toronto, Canada.",
                "count": 36,
                "papers": [
                    "Systems Evolution, Components and Services: Understanding the New Software Environment.",
                    "Software Visualization Tools: Survey and Analysis.",
                    "Mediating Diverse Visualisations for Comprehension.",
                    "Visualizing Object-Oriented Software in Virtual Reality.",
                    "Effects of Pointers on Data Dependences.",
                    "Program Slice Browser.",
                    "Understanding Distributed Systems via Execution Trace Data.",
                    "Inference-Based and Expectation-Based Processing in Program Comprehension.",
                    "Navigation and Comprehension of Programs by Novice Programmers.",
                    "Backward Conditioning: A New Program Specialisation Technique and Its Application to Program Comprehension.",
                    "Simplicity: A Key Engineering Concept for Program Understanding.",
                    "SHriMP Views: An Interactive Environment for Exploring Java Programs.",
                    "Automated Analysis of Scientific and Engineering Semantics.",
                    "Alborz: A Query-based Tool for Software Architecture Recovery.",
                    "Report from the Dagstuhl Seminar on Interoperability of Reengineering Tools.",
                    "Structure-Behavior-Function Program Understanding.",
                    "Software Architecture: Leverage for System/Program Comprehension.",
                    "Processing Software Source Text in Automated Design Recovery and Transformation.",
                    "A Flexible Method for Segmentation in Concept Assignmen.",
                    "HSML: Design Directed Source Code Hot Spots.",
                    "Reverse Engineering Meets Data Analysis.",
                    "Extracting Business Logic from Existing COBOL Programs as a Basis for Redevelopment.",
                    "An Algebraic Notation for Representing Threads in Object Oriented Software Comprehension.",
                    "Spreading Knowledge about Gnutella: A Case Study in Understanding Net-Centric Applications.",
                    "Understanding and Improving the Maintenance Process: A Method and Two Case Studies.",
                    "Comparing Graph-Based Program Comprehension Tools to Relational Database-Based Tools.",
                    "A Suite of Tools for Facilitating Reverse Engineering Using Formal Methods.",
                    "GSEE: A Generic Software Exploration Environment.",
                    "Adoption of Reverse Engineering Tools: A Cognitive Perspective and Methodology.",
                    "A Software Evaluation Model Using Component Association Views.",
                    "An Architectural Connectivity Metric and Its Support for Incremental Re-Architecting of Large Legacy Systems.",
                    "A Method to Re-Organize Legacy Systems via Concept Analysis.",
                    "Hidden Dependencies in Program Comprehension and Change Propagation.",
                    "Feature-Driven Program Understanding Using Concept Analysis of Execution Traces.",
                    "Side-Effect Removal Transformation.",
                    "Research Challenges in the Reverse Engineering Community."
                ]
            }
        ]
    },
    {
        "year": "2000",
        "name": "8th IWPC 2000",
        "info": "Limerick, Ireland",
        "venues": [
            {
                "sub_name_abbr": "conf/iwpc/2000",
                "sub_name": "8th International Workshop on Program Comprehension (IWPC 2000), 10-11 June 2000, Limerick, Ireland.",
                "count": 30,
                "papers": [
                    "Comprehending by varying Focal Distance.",
                    "Program Comprehension and Software Migration Strategies.",
                    "Understanding the Sources of Software Defects: A Filtering Approach.",
                    "Automated Quality Analysis of Component Software for Embedded Systems.",
                    "Understanding Some Software Quality Aspects from Architecture and Design Models.",
                    "A Pattern Matching Framework for Software Architecture Recovery and Restructuring.",
                    "Architectural Repair of Open Source Software.",
                    "Architectural Level Hypothesis Testing through Reverse Engineering of Object-Oriented Software.",
                    "A Formalism to Automate Mapping from Program Features to Code.",
                    "Tracing Object-Oriented Code into Functional Requirements.",
                    "Evaluating the Accessor Classification Approach to Detect Abstract Data Types.",
                    "Program Comprehension through Multiple Simultaneous Views: A Session with VinEd.",
                    "Smiley-An Interactive Tool for Monitoring Inter-Module Function Calls.",
                    "Requirements for an Elucidative Programming Environment.",
                    "Program Comprehension Techniques Improve Software Inspections: A Case Study.",
                    "Direction and Scope of Comprehension-Related Activities by Procedural and Object-Oriented Programmers: An Empirical Study.",
                    "An Exploratory Case Study of the Maintenance Effectiveness of Traceability Models.",
                    "An Empirical Study of Amorphous Slicing as a Program Comprehension Support Tool.",
                    "Metric-Based Analysis of Context-Free Grammars.",
                    "Source Animation as a Means of Program Comprehension.",
                    "The Effect of Call Graph Construction Algorithms for Object-Oriented Programs on Automatic Clustering.",
                    "A Framework for Experimental Evaluation of Clustering Techniques.",
                    "On the Stability of Software Clustering Algorithms.",
                    "Types and Concept Analysis for Legacy Systems.",
                    "A Comparison of Graphs of Concept for Reverse Engineering.",
                    "Case Study of Feature Location Using Dependence Graph.",
                    "Identification of Lower-Level Artifacts.",
                    "Empirical Studies of Programming-in-the-Large: How?",
                    "Tools for Program Comprehension: Building a Comprehender's Workbench.",
                    "Understanding Program Understanding."
                ]
            }
        ]
    },
    {
        "year": "1999",
        "name": "7th IWPC 1999",
        "info": "Pittsburgh, Pennsylvania, USA",
        "venues": [
            {
                "sub_name_abbr": "conf/iwpc/1999",
                "sub_name": "7th International Workshop on Program Comprehension (IWPC '99), May 5-7, 1999 - Pittsburgh, PA, USA.",
                "count": 24,
                "papers": [
                    "Comprehension with[in] Virtual Environment Visualisations.",
                    "Improving the Visibility of Graphical Program Displays: An Experimental Study.",
                    "Program Visualisation using C++ Lenses.",
                    "Reconstructing Ownership Architectures To Help Understand Software Systems.",
                    "An Architecture for Automated Software Maintenance.",
                    "Extending Software Quality Assessment Techniques to Java Systems.",
                    "Improving Software Comprehension through an Automated Dependency Tracer.",
                    "An Application of Fuzzy Reasoning to Support Automated Program Comprehension.",
                    "Understanding COBOL Systems using Inferred Types.",
                    "Restructuring Parallel Programs by Transformation of Point-To-Point Interactions into Collective Communication.",
                    "Comprehending a Complex, Distributed, Object-Oriented Software System a Report from the Field.",
                    "Black-Box Understanding of COTS Components.",
                    "The Relationship of Slicing and Debugging to Program Understanding.",
                    "Parsing C++ Despite Missing Declarations.",
                    "Slicing Concurrent Java Programs.",
                    "A Case Study of Applying an Eclectic Approach to Identify Objects in Code.",
                    "On Managing Classes for Evolving Software.",
                    "Evolving Object Oriented Design to Improve Code Traceability.",
                    "Empirical Evaluation of Hypertextual Information Access from Program Text.",
                    "On the Role of Static Analysis during Software Maintenance.",
                    "The Evolution of Websites.",
                    "Recovery of Jump Table Case Statements from Binary Code.",
                    "The SPARAMAT Approach to Automatic Comprehension of Sparse Matrix Computations.",
                    "Program Simplification as a Means of Approximating Undecidable Propositions."
                ]
            }
        ]
    },
    {
        "year": "1998",
        "name": "6th IWPC 1998",
        "info": "Ischia, Italy",
        "venues": [
            {
                "sub_name_abbr": "conf/iwpc/1998",
                "sub_name": "6th International Workshop on Program Comprehension (IWPC '98), June 24-26, 1998, Ischia, Italy.",
                "count": 24,
                "papers": [
                    "Pattern Visualization for Software Comprehension.",
                    "Visualizing Year 2000 Program Changes.",
                    "Visualizing Software in Virtual Reality.",
                    "Developing an Approach for the Recovery of Distributed Software Architectures.",
                    "An Analysis Framework for Understanding Layered Software Architectures.",
                    "Using Automatic Clustering to Produce High-Level System Organizations of Source Code.",
                    "An Architecture for Interoperable Program Understanding Tools.",
                    "Managing a Multi-File, Multi-Language Software Repository for Program Comprehension Tools 3/4 A Generic Approach.",
                    "DIME: A Direct Manipulation Environment for Evolutionary Development of Software.",
                    "The Effect of Object-Oriented Programming Expertise in Several Dimensions of Comprehension Strategies.",
                    "Rapid System Understanding: Two COBOL Case Studies.",
                    "Partial Comprehension of Complex Programs (enough to perform maintenance).",
                    "Current Parsing Techniques in Software Renovation Considered Harmful.",
                    "Parsing Minimization when Extracting Information from Code in the Presence of Conditional Compilation.",
                    "Specifying the Semantics of Machine Instructions.",
                    "Decomposing Legacy Programs: A First Step Towards Migrating to Client-Server Platforms.",
                    "Program Slicing in Understanding of Large Programs.",
                    "Design Pattern Recovery in Object-Oriented Software.",
                    "Program Understanding Behavior During Adaptation of Large Scale Software.",
                    "Studying Work Practices to Assist Tool Design in Software Engineering.",
                    "Archetypal Source Code Searches: A Survey of Software Developers and Maintainers.",
                    "Design of a Toolset for Dynamic Analysis of Concurrent Java Program.",
                    "The Feedback Compiler.",
                    "Automatic Detection of Interaction Patterns for Parallel Program Analysis and Development ."
                ]
            }
        ]
    },
    {
        "year": "1997",
        "name": "5th WPC 1997",
        "info": "Dearborn, MI, USA",
        "venues": [
            {
                "sub_name_abbr": "conf/iwpc/1997",
                "sub_name": "5th International Workshop on Program Comprehension (WPC '97), May 28-30, 1997 - Dearborn, MI, USA.",
                "count": 22,
                "papers": [
                    "Relationships between Documentation and Maintenance Activities.",
                    "Cognitive Design Elements to Support the Construction of a Mental Model during Software Visualization.",
                    "Understanding-In-The-Large.",
                    "Automated Chunking to Support Program Comprehension.",
                    "Semi-automatic Generation of Parallelizable Patterns from Source Code Examples.",
                    "Using Knowledge Representation to Understand Interactive Systems.",
                    "Amorphous Program Slicing.",
                    "Dynamic Program Slicing in Understanding of Program Execution.",
                    "Points-to Analysis for Program Understanding.",
                    "A Case Study of Domain-based Program Understanding.",
                    "A Little Knowledge Can Go a Long Way Towards Program Understanding.",
                    "Facilitating Program Comprehension via Generic Components for State Machines.",
                    "Enriching Program Comprehension for Software Reuse.",
                    "Identifying objects in legacy systems.",
                    "Code Understanding through Program Transformation for Reusable Component Identification.",
                    "Towards Standard for Experiments in Program Comprehension.",
                    "Position Paper on Research Infrastructure for Reengineering.",
                    "Building a Research Infrastructure for Program Comprehension Observations.",
                    "On Using the Web as Infrastructure for Reengineering.",
                    "Evaluation of the ITOC information system design recovery tool.",
                    "Glyphs for Software Visualization.",
                    "PUI: A Tool to Support Program Understanding."
                ]
            }
        ]
    },
    {
        "year": "1996",
        "name": "4th WPC 1996",
        "info": "Berlin, Germany",
        "venues": [
            {
                "sub_name_abbr": "conf/iwpc/1996",
                "sub_name": "4th International Workshop on Program Comprehension (WPC '96), March 29-31, 1996, Berlin, Germany.",
                "count": 24,
                "papers": [
                    "An Interactive Visualization for Message Sequence Charts.",
                    "Understanding Function Behaviors through Program Slicing.",
                    "Towards a Framework for Program Understanding.",
                    "A Workbench for Program Comprehension during Software Maintenance.",
                    "Rapid Development of Simple, Custom Program Analysis Tools.",
                    "A Method for The Formal Testing of Program Visualization Tools.",
                    "Toward a Constraint-Satisfaction Framework for Evaluating Program-Understanding Algorithms.",
                    "On the Role of Hypotheses during Opportunistic Understanding While Porting Large Scale Code.",
                    "Effort Estimation for Program Comprehension.",
                    "On Inserting Program Understanding Technology into the Software Change Process.",
                    "Greater Understanding Through Maintainer Driven Traceability.",
                    "Extracting Business Rules from Source Code .",
                    "Comprehension of Safety-Critical Systems Using Domain-Specific Languages.",
                    "Scalable Interfaces to Support Program Comprehension.",
                    "Interprocedural analysis for program comprehension by specialization.",
                    "Fast, Flexible Syntactic Pattern Matching and Processing.",
                    "A Formal Architectural Design Patterns-Based Approach to Software Understanding.",
                    "PAP Recognizer: A Tool for Automatic Recognition of Parallelizable Patterns.",
                    "The Gadfly: An Approach to Architectural-Level System Comprehension.",
                    "Understanding the architecture of software systems.",
                    "Evaluating process clusters to support automatic program understanding.",
                    "Improving Program Understanding by Unfolding Layers of Interacting Patterns.",
                    "Experiences in Automatic Leveling of Data Flow Diagrams.",
                    "Derivation and Presentation of an Abstract Program Space for Ada."
                ]
            }
        ]
    },
    {
        "year": "1994",
        "name": "3rd WPC 1994",
        "info": "Washington, DC, USA",
        "venues": [
            {
                "sub_name_abbr": "conf/iwpc/1994",
                "sub_name": "Proceedings 1994 IEEE 3rd Workshop on Program Comprehension, WPC '94, Washington, DC, USA, November 14-15, 1994.",
                "count": 20,
                "papers": [
                    "A greedy approach to object identification in imperative code.",
                    "Program comprehension through the identification of abstract data types.",
                    "A tool for understanding object-oriented program dependencies.",
                    "Recovering the architectural design for software comprehension.",
                    "A documentation-related approach to object-oriented program understanding.",
                    "Layered explanations of software: a methodology for program comprehension.",
                    "Experiences using reverse engineering techniques to analyse documentation.",
                    "Analyzing the application of a reverse engineering process to a real situation.",
                    "Dynamic code cognition behaviors for large scale code.",
                    "Abstraction mechanisms for pictorial slicing.",
                    "Understanding code containing preprocessor constructs.",
                    "Parallelizing sequential programs by algorithm-level transformations.",
                    "Towards automated code parallelization through program comprehension.",
                    "Issues in visualization for the comprehension of parallel programs.",
                    "Using procedural patterns in abstracting relational schemata.",
                    "Relational views for program comprehension.",
                    "Object data models to support source code queries: implementing SCA within REFINE.",
                    "Determining the usefulness of colour and fonts in a programming task.",
                    "SFAC, a tool for program comprehension by specialization.",
                    "Theory and practice of middle-out programming to support program understanding."
                ]
            }
        ]
    },
    {
        "year": "1993",
        "name": "2nd WPC 1993",
        "info": "Capri, Italy",
        "venues": [
            {
                "sub_name_abbr": "conf/iwpc/1993",
                "sub_name": "IEEE Second Workshop on Program Comprehension, WPC 1993, Capri, Italy, 8-9 July 1993.",
                "count": 21,
                "papers": [
                    "Understanding the process of software maintenance.",
                    "Criteria for program comprehension derived from software complexity metrics.",
                    "A process algebra based program and system representation for reverse engineering.",
                    "Understanding Lolita: program comprehension in functional languages.",
                    "Experiments in identifying reusable abstract data types in program code.",
                    "Partial evaluation as an aid to the comprehension of Fortran programs.",
                    "Facilitating the comprehension of C-programs: an experimental study.",
                    "Use of a program understanding taxonomy at Hewlett-Packard.",
                    "Recovering user interface specifications for porting transaction processing applications.",
                    "From program comprehension to tool requirements for an industrial environment.",
                    "Model-based tools to record program understanding.",
                    "A hybrid approach to recognizing programming plans.",
                    "A toolset for program understanding.",
                    "A combined representation for the maintenance of C programs.",
                    "An integrated and interactive reverse engineering environment for existing software comprehension.",
                    "DOCKET: program comprehension-in-the-large.",
                    "The role of testing and dynamic analysis in program comprehension supports.",
                    "Understanding concurrent programs using program transformations.",
                    "Charon: a tool for code redocumentation and re-engineering.",
                    "Deriving path expressions recursively.",
                    "Extracting application domain functions from old code: a real experience."
                ]
            }
        ]
    }
]